{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"barch.py"},{"location":"#what-is-this","title":"What is this?","text":"<p>An asynchronous wrapper for the fanmade Blue Archive API.</p>"},{"location":"#why-and-whats-the-use","title":"Why and what's the use?","text":"<p>Idk.... built it coz I don't have anything better to do.</p>"},{"location":"#installation","title":"Installation","text":"<p>Python version 3.10 or greater is required to use barch.py.</p> <pre><code>pip install barch-py\n</code></pre>"},{"location":"#features","title":"Features","text":"<ul> <li>Get all the characters - EN and JP version</li> <li>Get a character details by id or name - EN and JP version</li> <li>Get characters based on different parameters like position, role etc</li> <li>Get current, ongoing and upcoming raids - EN and JP versions</li> </ul>"},{"location":"#usage","title":"Usage","text":"<ul> <li>Example of getting all the characters - EN and JP versions</li> </ul> <pre><code>from  barch  import  Client\nclient = Client()\ncharacters_result = await client.character.get_all_characters()\ncharacters_result_jp = await client.character.get_all_characters_jp()\nif characters_result.is_success:\ncharacters = characters_result.value\nif characters_result.is_error:\nerror = characters_result.error\nif characters_result_jp.is_success:\ncharacters_jp = characters_result_jp.value\nif characters_result_jp.is_error:\nerror_jp = characters_result_jp.error\nawait  client.close()\n</code></pre> <ul> <li>Example of getting raid details - EN and JP versions</li> </ul> <pre><code>from barch import Client\nclient = Client()\nraids_result = await client.raid.get_raids()\nraids_result_jp = await client.raid.get_raids_jp()\nif raids_result.is_success:\nraids = raids_result.value\nif raids_result.is_error:\nerror = raids_result.error\nif raids_result_jp.is_success:\nraids_jp = raids_result_jp.value\nif raids_result_jp.is_error:\nerror_jp = raids_result_jp.error\nawait  client.close()\n</code></pre>"},{"location":"#license","title":"License","text":"<p>barch.py is licensed under MIT License.</p>"},{"location":"reference/client/","title":"client","text":"<p>This module has the client to connect to BlueArchive API.</p>"},{"location":"reference/client/#barch.client.Client","title":"Client","text":"<p>An asynchronous client used to interact with the BlueArchive API.</p> Source code in <code>barch/client.py</code> <pre><code>class Client:\n\"\"\"An asynchronous client used to interact with the BlueArchive API.\"\"\"\n__slots__ = (\"_http\", \"_serializer\", \"_character\", \"_raid\")\ndef __init__(self) -&gt; None:\nself._http = services.HttpService()\nself._serializer = serializer.Serializer()\nself._character = services.CharacterService(self._http, self._serializer)\nself._raid = services.RaidService(self._http, self._serializer)\n@property\ndef character(self) -&gt; services.CharacterService:\n\"\"\"The [`CharacterService`][barch.CharacterService] used to make character related requests.\"\"\"\nreturn self._character\n@property\ndef raid(self) -&gt; services.RaidService:\n\"\"\"The [`RaidService`][barch.RaidService] used to make raid related requests.\"\"\"\nreturn self._raid\nasync def close(self) -&gt; None:\n\"\"\"Close the existing client session.\n        !!! warning\n            You will receive an error in your console if this is not called before the program terminates.\"\"\"\nawait self._http.close()\n</code></pre>"},{"location":"reference/client/#barch.client.Client.character","title":"character  <code>property</code>","text":"<pre><code>character: services.CharacterService\n</code></pre> <p>The <code>CharacterService</code> used to make character related requests.</p>"},{"location":"reference/client/#barch.client.Client.raid","title":"raid  <code>property</code>","text":"<pre><code>raid: services.RaidService\n</code></pre> <p>The <code>RaidService</code> used to make raid related requests.</p>"},{"location":"reference/client/#barch.client.Client.close","title":"close  <code>async</code>","text":"<pre><code>close() -&gt; None\n</code></pre> <p>Close the existing client session.</p> <p>Warning</p> <p>You will receive an error in your console if this is not called before the program terminates.</p> Source code in <code>barch/client.py</code> <pre><code>async def close(self) -&gt; None:\n\"\"\"Close the existing client session.\n    !!! warning\n        You will receive an error in your console if this is not called before the program terminates.\"\"\"\nawait self._http.close()\n</code></pre>"},{"location":"reference/enums/","title":"enums","text":"<p>Module for exporting all the enums used in the library.</p>"},{"location":"reference/enums/#barch.enums.Position","title":"Position","text":"<p>             Bases: <code>BaseEnum</code></p> <p>Represents position of the character.</p> Source code in <code>barch/enums/character.py</code> <pre><code>class Position(BaseEnum):\n\"\"\"Represents position of the character.\"\"\"\nBack = \"Back\"\nFront = \"Front\"\nMiddle = \"Middle\"\n</code></pre>"},{"location":"reference/enums/#barch.enums.Rarity","title":"Rarity","text":"<p>             Bases: <code>BaseEnum</code></p> <p>Represents the rarity of the character.</p> Source code in <code>barch/enums/character.py</code> <pre><code>class Rarity(BaseEnum):\n\"\"\"Represents the rarity of the character.\"\"\"\nRare = \"R\"\nSuperRare = \"SR\"\nSuperSuperRare = \"SSR\"\n</code></pre>"},{"location":"reference/enums/#barch.enums.Role","title":"Role","text":"<p>             Bases: <code>BaseEnum</code></p> <p>Represents role of the character.</p> Source code in <code>barch/enums/character.py</code> <pre><code>class Role(BaseEnum):\n\"\"\"Represents role of the character.\"\"\"\nDealer = \"Dealer\"\nHealer = \"Healer\"\nSupport = \"Support\"\nTank = \"Tank\"\nTacticalSupport = \"T.S.\"\n</code></pre>"},{"location":"reference/models/","title":"models","text":"<p>Module for exporting all the models used in the library.</p>"},{"location":"reference/models/#barch.models.BaseCharacter","title":"BaseCharacter","text":"<p>             Bases: <code>BaseModel</code></p> <p>Represents base character model.</p> Source code in <code>barch/models/character.py</code> <pre><code>@attrs.define(init=False)\nclass BaseCharacter(BaseModel):\n\"\"\"Represents base character model.\"\"\"\nname: str\n\"\"\"Name of the character.\"\"\"\nprofile: str\n\"\"\"Profile description of the character.\"\"\"\nrarity: Rarity\n\"\"\"Rarity of the character.\"\"\"\nbase_star: int\n\"\"\"Base star.\"\"\"\nposition: Position\n\"\"\"Position of the character.\"\"\"\nrole: Role\n\"\"\"Role of the character.\"\"\"\narmor_type: str\n\"\"\"Armor type of the character.\"\"\"\nbullet_type: str\n\"\"\"Bullet type of the character.\"\"\"\nweapon_type: str\n\"\"\"Weapon type of the character.\"\"\"\nsquad_type: str\n\"\"\"Squad type.\"\"\"\n</code></pre>"},{"location":"reference/models/#barch.models.BaseCharacter.armor_type","title":"armor_type  <code>instance-attribute</code>","text":"<pre><code>armor_type: str\n</code></pre> <p>Armor type of the character.</p>"},{"location":"reference/models/#barch.models.BaseCharacter.base_star","title":"base_star  <code>instance-attribute</code>","text":"<pre><code>base_star: int\n</code></pre> <p>Base star.</p>"},{"location":"reference/models/#barch.models.BaseCharacter.bullet_type","title":"bullet_type  <code>instance-attribute</code>","text":"<pre><code>bullet_type: str\n</code></pre> <p>Bullet type of the character.</p>"},{"location":"reference/models/#barch.models.BaseCharacter.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>Name of the character.</p>"},{"location":"reference/models/#barch.models.BaseCharacter.position","title":"position  <code>instance-attribute</code>","text":"<pre><code>position: Position\n</code></pre> <p>Position of the character.</p>"},{"location":"reference/models/#barch.models.BaseCharacter.profile","title":"profile  <code>instance-attribute</code>","text":"<pre><code>profile: str\n</code></pre> <p>Profile description of the character.</p>"},{"location":"reference/models/#barch.models.BaseCharacter.rarity","title":"rarity  <code>instance-attribute</code>","text":"<pre><code>rarity: Rarity\n</code></pre> <p>Rarity of the character.</p>"},{"location":"reference/models/#barch.models.BaseCharacter.role","title":"role  <code>instance-attribute</code>","text":"<pre><code>role: Role\n</code></pre> <p>Role of the character.</p>"},{"location":"reference/models/#barch.models.BaseCharacter.squad_type","title":"squad_type  <code>instance-attribute</code>","text":"<pre><code>squad_type: str\n</code></pre> <p>Squad type.</p>"},{"location":"reference/models/#barch.models.BaseCharacter.weapon_type","title":"weapon_type  <code>instance-attribute</code>","text":"<pre><code>weapon_type: str\n</code></pre> <p>Weapon type of the character.</p>"},{"location":"reference/models/#barch.models.Character","title":"Character","text":"<p>             Bases: <code>BaseCharacter</code></p> <p>Represents character model.</p> Source code in <code>barch/models/character.py</code> <pre><code>@attrs.define(init=False)\nclass Character(BaseCharacter):\n\"\"\"Represents character model.\"\"\"\nid: int\n\"\"\"Id of the character.\"\"\"\nschool: str\n\"\"\"The school to which the character belongs to.\"\"\"\nterrain: Terrain\n\"\"\"The terrain details.\"\"\"\n</code></pre>"},{"location":"reference/models/#barch.models.Character.id","title":"id  <code>instance-attribute</code>","text":"<pre><code>id: int\n</code></pre> <p>Id of the character.</p>"},{"location":"reference/models/#barch.models.Character.school","title":"school  <code>instance-attribute</code>","text":"<pre><code>school: str\n</code></pre> <p>The school to which the character belongs to.</p>"},{"location":"reference/models/#barch.models.Character.terrain","title":"terrain  <code>instance-attribute</code>","text":"<pre><code>terrain: Terrain\n</code></pre> <p>The terrain details.</p>"},{"location":"reference/models/#barch.models.CharacterDetails","title":"CharacterDetails","text":"<p>             Bases: <code>BaseModel</code></p> <p>Represents Character Details model.</p> Source code in <code>barch/models/character.py</code> <pre><code>@attrs.define(init=False)\nclass CharacterDetails(BaseModel):\n\"\"\"Represents Character Details model.\"\"\"\nid: int\nis_released: bool\nis_playable: bool\ncharacter: BaseCharacter\ninfo: CharacterInfo\nimage: Image\nstat: Stats\nterrain: Terrain\nskills: Skills\n</code></pre>"},{"location":"reference/models/#barch.models.CharacterInfo","title":"CharacterInfo","text":"<p>             Bases: <code>BaseModel</code></p> <p>Represents CharacterInfo model.</p> Source code in <code>barch/models/character.py</code> <pre><code>@attrs.define(init=False)\nclass CharacterInfo(BaseModel):\n\"\"\"Represents CharacterInfo model.\"\"\"\nage: int\n# TODO: string to int\n\"\"\"The age of the character.\"\"\"\nbirth_date: str\n\"\"\"The birth date of the character.\"\"\"\nheight: str\n\"\"\"The height of the character.\"\"\"\nartist: str\n\"\"\"The designer or illustrator of the character.\"\"\"\nclub: str\n\"\"\"The club to which the character belongs.\"\"\"\nschool: str\n\"\"\"The school to which the character belongs.\"\"\"\nschool_year: str\n\"\"\"The school year of the character.\"\"\"\nvoice_actor: str\n\"\"\"The voice actor of the character.\"\"\"\n</code></pre>"},{"location":"reference/models/#barch.models.CharacterInfo.age","title":"age  <code>instance-attribute</code>","text":"<pre><code>age: int\n</code></pre> <p>The age of the character.</p>"},{"location":"reference/models/#barch.models.CharacterInfo.artist","title":"artist  <code>instance-attribute</code>","text":"<pre><code>artist: str\n</code></pre> <p>The designer or illustrator of the character.</p>"},{"location":"reference/models/#barch.models.CharacterInfo.birth_date","title":"birth_date  <code>instance-attribute</code>","text":"<pre><code>birth_date: str\n</code></pre> <p>The birth date of the character.</p>"},{"location":"reference/models/#barch.models.CharacterInfo.club","title":"club  <code>instance-attribute</code>","text":"<pre><code>club: str\n</code></pre> <p>The club to which the character belongs.</p>"},{"location":"reference/models/#barch.models.CharacterInfo.height","title":"height  <code>instance-attribute</code>","text":"<pre><code>height: str\n</code></pre> <p>The height of the character.</p>"},{"location":"reference/models/#barch.models.CharacterInfo.school","title":"school  <code>instance-attribute</code>","text":"<pre><code>school: str\n</code></pre> <p>The school to which the character belongs.</p>"},{"location":"reference/models/#barch.models.CharacterInfo.school_year","title":"school_year  <code>instance-attribute</code>","text":"<pre><code>school_year: str\n</code></pre> <p>The school year of the character.</p>"},{"location":"reference/models/#barch.models.CharacterInfo.voice_actor","title":"voice_actor  <code>instance-attribute</code>","text":"<pre><code>voice_actor: str\n</code></pre> <p>The voice actor of the character.</p>"},{"location":"reference/models/#barch.models.Characters","title":"Characters","text":"<p>             Bases: <code>BaseModel</code></p> <p>Represents Characters model.</p> Source code in <code>barch/models/character.py</code> <pre><code>@attrs.define\nclass Characters(BaseModel):\n\"\"\"Represents Characters model.\"\"\"\nid: int\nname: str\n</code></pre>"},{"location":"reference/models/#barch.models.CommonModel","title":"CommonModel","text":"<p>             Bases: <code>BaseModel</code></p> <p>Represents a CommonModel model which is used in multiple classes.</p> Source code in <code>barch/models/character.py</code> <pre><code>@attrs.define\nclass CommonModel(BaseModel):\n\"\"\"Represents a CommonModel model which is used in multiple classes.\"\"\"\nid: int\nname: str\ndescription: str\n</code></pre>"},{"location":"reference/models/#barch.models.GenerateRoute","title":"GenerateRoute","text":"Source code in <code>barch/models/route.py</code> <pre><code>class GenerateRoute:\n__slots__ = (\"_route\", \"_params\", \"_data\")\ndef __init__(self, route: Route) -&gt; None:\nself._route = route\nself._params: dict[str, str | int] = {}\nself._data: dict[str, str | int] = {}\n@property\ndef route(self) -&gt; Route:\n\"\"\"The route itself.\"\"\"\nreturn self._route\n@property\ndef uri(self) -&gt; str:\n\"\"\"The routes uri endpoint.\"\"\"\nreturn self.route.uri\n@uri.setter\ndef uri(self, val: str) -&gt; str:\n\"\"\"Set the uri.\"\"\"\nself.route.uri = val\n@property\ndef method(self) -&gt; str:\n\"\"\"The routes method, i.e. GET, POST...\"\"\"\nreturn self.route.method\n@property\ndef params(self) -&gt; dict[str, str | int]:\n\"\"\"The query params for the route.\"\"\"\nreturn self._params\n@property\ndef data(self) -&gt; dict[str, str | int]:\n\"\"\"The input data that needs to be passed.\"\"\"\nreturn self._data\ndef with_params(self, params: dict[str, Any]) -&gt; GenerateRoute:\n\"\"\"Adds additional query params to this generated route.\"\"\"\nif params:\nself.params.update(params)\nreturn self\ndef with_data(self, data: dict[str, Any]) -&gt; GenerateRoute:\n\"\"\"Adds input data to the generated route.\"\"\"\nif data:\nself._data.update(data)\nreturn self\n</code></pre>"},{"location":"reference/models/#barch.models.GenerateRoute.data","title":"data  <code>property</code>","text":"<pre><code>data: dict[str, str | int]\n</code></pre> <p>The input data that needs to be passed.</p>"},{"location":"reference/models/#barch.models.GenerateRoute.method","title":"method  <code>property</code>","text":"<pre><code>method: str\n</code></pre> <p>The routes method, i.e. GET, POST...</p>"},{"location":"reference/models/#barch.models.GenerateRoute.params","title":"params  <code>property</code>","text":"<pre><code>params: dict[str, str | int]\n</code></pre> <p>The query params for the route.</p>"},{"location":"reference/models/#barch.models.GenerateRoute.route","title":"route  <code>property</code>","text":"<pre><code>route: Route\n</code></pre> <p>The route itself.</p>"},{"location":"reference/models/#barch.models.GenerateRoute.uri","title":"uri  <code>property</code> <code>writable</code>","text":"<pre><code>uri: str\n</code></pre> <p>The routes uri endpoint.</p>"},{"location":"reference/models/#barch.models.GenerateRoute.with_data","title":"with_data","text":"<pre><code>with_data(data: dict[str, Any]) -&gt; GenerateRoute\n</code></pre> <p>Adds input data to the generated route.</p> Source code in <code>barch/models/route.py</code> <pre><code>def with_data(self, data: dict[str, Any]) -&gt; GenerateRoute:\n\"\"\"Adds input data to the generated route.\"\"\"\nif data:\nself._data.update(data)\nreturn self\n</code></pre>"},{"location":"reference/models/#barch.models.GenerateRoute.with_params","title":"with_params","text":"<pre><code>with_params(params: dict[str, Any]) -&gt; GenerateRoute\n</code></pre> <p>Adds additional query params to this generated route.</p> Source code in <code>barch/models/route.py</code> <pre><code>def with_params(self, params: dict[str, Any]) -&gt; GenerateRoute:\n\"\"\"Adds additional query params to this generated route.\"\"\"\nif params:\nself.params.update(params)\nreturn self\n</code></pre>"},{"location":"reference/models/#barch.models.HttpErrorResponse","title":"HttpErrorResponse","text":"<p>             Bases: <code>BaseModel</code></p> <p>Represents HTTP error response.</p> Source code in <code>barch/models/http.py</code> <pre><code>@attrs.define()\nclass HttpErrorResponse(BaseModel):\n\"\"\"Represents HTTP error response.\"\"\"\nstatus: int\n\"\"\"HTTP error status code.\"\"\"\nmessage: str\n\"\"\"The error response message.\"\"\"\n</code></pre>"},{"location":"reference/models/#barch.models.HttpErrorResponse.message","title":"message  <code>instance-attribute</code>","text":"<pre><code>message: str\n</code></pre> <p>The error response message.</p>"},{"location":"reference/models/#barch.models.HttpErrorResponse.status","title":"status  <code>instance-attribute</code>","text":"<pre><code>status: int\n</code></pre> <p>HTTP error status code.</p>"},{"location":"reference/models/#barch.models.HttpSuccessResponse","title":"HttpSuccessResponse","text":"<p>             Bases: <code>BaseModel</code></p> <p>Represents HTTP sucess response.</p> Source code in <code>barch/models/http.py</code> <pre><code>@attrs.define()\nclass HttpSuccessResponse(BaseModel):\n\"\"\"Represents HTTP sucess response.\"\"\"\nstatus: int\n\"\"\"The HTTP status code.\"\"\"\nmessage: str\n\"\"\"The success response message.\"\"\"\ndata: Any\n\"\"\"The JSON API response.\"\"\"\n</code></pre>"},{"location":"reference/models/#barch.models.HttpSuccessResponse.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data: Any\n</code></pre> <p>The JSON API response.</p>"},{"location":"reference/models/#barch.models.HttpSuccessResponse.message","title":"message  <code>instance-attribute</code>","text":"<pre><code>message: str\n</code></pre> <p>The success response message.</p>"},{"location":"reference/models/#barch.models.HttpSuccessResponse.status","title":"status  <code>instance-attribute</code>","text":"<pre><code>status: int\n</code></pre> <p>The HTTP status code.</p>"},{"location":"reference/models/#barch.models.Image","title":"Image","text":"<p>             Bases: <code>BaseModel</code></p> <p>Represents image model.</p> Source code in <code>barch/models/character.py</code> <pre><code>@attrs.define\nclass Image(BaseModel):\n\"\"\"Represents image model.\"\"\"\nicon: str\nlobby: str\nportrait: str\n</code></pre>"},{"location":"reference/models/#barch.models.Raid","title":"Raid","text":"<p>             Bases: <code>BaseModel</code></p> <p>Represents Raid model which contains individual raid details..</p> Source code in <code>barch/models/raid.py</code> <pre><code>@attrs.define(init=False)\nclass Raid(BaseModel):\n\"\"\"Represents Raid model which contains individual raid details..\"\"\"\nseason_id: int | None = attrs.field(default=None)\nboss_name: str | None = attrs.field(default=None)\nstart_at: datetime | None = attrs.field(default=None)\nsettle_at: datetime | None = attrs.field(default=None)\nend_at: datetime | None = attrs.field(default=None)\n</code></pre>"},{"location":"reference/models/#barch.models.Raids","title":"Raids","text":"<p>             Bases: <code>BaseModel</code></p> <p>Represents Raids model.</p> Source code in <code>barch/models/raid.py</code> <pre><code>@attrs.define(init=False)\nclass Raids(BaseModel):\n\"\"\"Represents Raids model.\"\"\"\ncurrent: list[Raid] | None = attrs.field(default=None)\nupcoming: list[Raid] | None = attrs.field(default=None)\nended: list[Raid] | None = attrs.field(default=None)\n</code></pre>"},{"location":"reference/models/#barch.models.Route","title":"Route","text":"<p>The route model.</p> Source code in <code>barch/models/route.py</code> <pre><code>@attrs.define\nclass Route:\n\"\"\"The route model.\"\"\"\nmethod: str\n\"\"\"The http method of request.\"\"\"\nuri: str\n\"\"\"The request uri.\"\"\"\ndef generate_route(self, *args: str | int) -&gt; GenerateRoute:\n\"\"\"Method to create a route with all the necessary data.\n        Args:\n            *args: the arguments to insert.\"\"\"\ngenerated_route = GenerateRoute(self)\nfor arg in args:\ngenerated_route.uri = generated_route.uri.replace(r\"()\", str(arg), 1)\nreturn generated_route\n</code></pre>"},{"location":"reference/models/#barch.models.Route.method","title":"method  <code>instance-attribute</code>","text":"<pre><code>method: str\n</code></pre> <p>The http method of request.</p>"},{"location":"reference/models/#barch.models.Route.uri","title":"uri  <code>instance-attribute</code>","text":"<pre><code>uri: str\n</code></pre> <p>The request uri.</p>"},{"location":"reference/models/#barch.models.Route.generate_route","title":"generate_route","text":"<pre><code>generate_route(*args: str | int) -&gt; GenerateRoute\n</code></pre> <p>Method to create a route with all the necessary data.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <code>str | int</code> <p>the arguments to insert.</p> <code>()</code> Source code in <code>barch/models/route.py</code> <pre><code>def generate_route(self, *args: str | int) -&gt; GenerateRoute:\n\"\"\"Method to create a route with all the necessary data.\n    Args:\n        *args: the arguments to insert.\"\"\"\ngenerated_route = GenerateRoute(self)\nfor arg in args:\ngenerated_route.uri = generated_route.uri.replace(r\"()\", str(arg), 1)\nreturn generated_route\n</code></pre>"},{"location":"reference/models/#barch.models.Skills","title":"Skills","text":"<p>             Bases: <code>BaseModel</code></p> <p>Represents Skills model.</p> Source code in <code>barch/models/character.py</code> <pre><code>@attrs.define(init=False)\nclass Skills(BaseModel):\n\"\"\"Represents Skills model.\"\"\"\nex: list[CommonModel] | None = attrs.field(default=None)\nnormal: list[CommonModel] | None = attrs.field(default=None)\npassive: list[CommonModel] | None = attrs.field(default=None)\nsub: list[CommonModel] | None = attrs.field(default=None)\n</code></pre>"},{"location":"reference/models/#barch.models.Stats","title":"Stats","text":"<p>             Bases: <code>BaseModel</code></p> <p>Represents Stats model.</p> Source code in <code>barch/models/character.py</code> <pre><code>@attrs.define(init=False)\nclass Stats(BaseModel):\n\"\"\"Represents Stats model.\"\"\"\nid: int\nattack_level1: int\nattack_level100: int\nmax_hp_level1: int\nmax_hp_level100: int\ndefense_level1: int\ndefense_level100: int\nheal_power_level1: int\nheal_power_level100: int\ndef_penetrate_level1: int\ndef_penetrate_level100: int\nammo_count: int\nammo_cost: int\nrange: int\nmove_speed: int\nstreet_mood: str\noutdoor_mood: str\nindoor_mood: str\n</code></pre>"},{"location":"reference/models/#barch.models.Terrain","title":"Terrain","text":"<p>             Bases: <code>BaseModel</code></p> <p>Represents Terrain model.</p> Source code in <code>barch/models/character.py</code> <pre><code>@attrs.define(init=False)\nclass Terrain(BaseModel):\n\"\"\"Represents Terrain model.\"\"\"\nurban: TerrainDetails\noutdoor: TerrainDetails\nindoor: TerrainDetails\n</code></pre>"},{"location":"reference/models/#barch.models.TerrainDetails","title":"TerrainDetails","text":"<p>             Bases: <code>BaseModel</code></p> <p>Represents TerrainDetails model.</p> Source code in <code>barch/models/character.py</code> <pre><code>@attrs.define\nclass TerrainDetails(BaseModel):\n\"\"\"Represents TerrainDetails model.\"\"\"\ndamage_dealt: str\nshield_block_rate: str\n</code></pre>"},{"location":"reference/result/","title":"result","text":"<p>Module for result which every method in the module returns.</p>"},{"location":"reference/result/#barch.result.Error","title":"Error","text":"<p>             Bases: <code>Result[S, E]</code></p> <p>Represents Error result class.</p> Source code in <code>barch/result.py</code> <pre><code>class Error(Result[S, E]):\n\"\"\"Represents Error result class.\"\"\"\n__slots__ = ()\ndef __init__(self, error) -&gt; None:\nself._error = error\n@property\ndef is_success(self) -&gt; bool:\n\"\"\"Returns `False` for success result.\"\"\"\nreturn False\n@property\ndef is_error(self) -&gt; bool:\n\"\"\"Returns `True` for success result.\"\"\"\nreturn True\n@property\ndef value(self) -&gt; S:\nreturn None\n@property\ndef error(self) -&gt; E:\nreturn self._error\n</code></pre>"},{"location":"reference/result/#barch.result.Error.is_error","title":"is_error  <code>property</code>","text":"<pre><code>is_error: bool\n</code></pre> <p>Returns <code>True</code> for success result.</p>"},{"location":"reference/result/#barch.result.Error.is_success","title":"is_success  <code>property</code>","text":"<pre><code>is_success: bool\n</code></pre> <p>Returns <code>False</code> for success result.</p>"},{"location":"reference/result/#barch.result.Result","title":"Result","text":"<p>             Bases: <code>Generic[S, E]</code>, <code>ABC</code></p> <p>Represents Result.</p> Source code in <code>barch/result.py</code> <pre><code>class Result(Generic[S, E], abc.ABC):\n\"\"\"Represents Result.\"\"\"\n__slots__ = (\"_error\", \"_value\")\ndef __init__(self, value, error) -&gt; None:\nself._value = value\nself._error = error\n@property\ndef is_success(self) -&gt; bool:\n\"\"\"Returns `True` for success result and `False` for error result.\"\"\"\n@property\ndef is_error(self) -&gt; bool:\n\"\"\"Returns `True` for error result and `False` for success result.\"\"\"\n@property\ndef value(self) -&gt; S:\n\"\"\"Returns data for a success result and `None` for an error result.\"\"\"\n@property\ndef error(self) -&gt; E:\n\"\"\"Returns error for an error result and `None` for a success result.\"\"\"\n</code></pre>"},{"location":"reference/result/#barch.result.Result.error","title":"error  <code>property</code>","text":"<pre><code>error: E\n</code></pre> <p>Returns error for an error result and <code>None</code> for a success result.</p>"},{"location":"reference/result/#barch.result.Result.is_error","title":"is_error  <code>property</code>","text":"<pre><code>is_error: bool\n</code></pre> <p>Returns <code>True</code> for error result and <code>False</code> for success result.</p>"},{"location":"reference/result/#barch.result.Result.is_success","title":"is_success  <code>property</code>","text":"<pre><code>is_success: bool\n</code></pre> <p>Returns <code>True</code> for success result and <code>False</code> for error result.</p>"},{"location":"reference/result/#barch.result.Result.value","title":"value  <code>property</code>","text":"<pre><code>value: S\n</code></pre> <p>Returns data for a success result and <code>None</code> for an error result.</p>"},{"location":"reference/result/#barch.result.Success","title":"Success","text":"<p>             Bases: <code>Result[S, E]</code></p> <p>Reprsents Success result class.</p> Source code in <code>barch/result.py</code> <pre><code>class Success(Result[S, E]):\n\"\"\"Reprsents Success result class.\"\"\"\n__slots__ = ()\ndef __init__(self, value) -&gt; None:\nself._value = value\n@property\ndef is_success(self) -&gt; bool:\n\"\"\"Returns `True` for success result.\"\"\"\nreturn True\n@property\ndef is_error(self) -&gt; bool:\n\"\"\"Returns `False` for success result.\"\"\"\nreturn False\n@property\ndef value(self) -&gt; S:\nreturn self._value\n@property\ndef error(self) -&gt; E:\nreturn None\n</code></pre>"},{"location":"reference/result/#barch.result.Success.is_error","title":"is_error  <code>property</code>","text":"<pre><code>is_error: bool\n</code></pre> <p>Returns <code>False</code> for success result.</p>"},{"location":"reference/result/#barch.result.Success.is_success","title":"is_success  <code>property</code>","text":"<pre><code>is_success: bool\n</code></pre> <p>Returns <code>True</code> for success result.</p>"},{"location":"reference/serializer/","title":"serializer","text":"<p>Module to serialize and deserialize JSON data and models.</p>"},{"location":"reference/serializer/#barch.serializer.Serializer","title":"Serializer","text":"<p>Deserializes JSON data to models.</p> Source code in <code>barch/serializer.py</code> <pre><code>class Serializer:\n\"\"\"Deserializes JSON data to models.\"\"\"\n__slots__ = ()\ndef _datetime_from_unix_ms(self, datetime_str: str | int | None) -&gt; datetime | None:\n\"\"\"Converts unix timestamp in milliseconds to UTC datetime.\"\"\"\nreturn datetime.utcfromtimestamp(datetime_str / 1000) if datetime_str else None\ndef _to_camel_case(self, attr: str) -&gt; str:\n\"\"\"Converts input arguments to camel case.\"\"\"\nfirst, *rest = attr.split(\"_\")\nreturn \"\".join((first.lower(), *map(str.title, rest)))\ndef _set_attrs(\nself, model: Any, data: dict[str, Any], *attrs: str, camel_case: bool = False\n) -&gt; None:\n\"\"\"Generate model from JSON payload.\"\"\"\nif data:\nfor attr in attrs:\ncased_attr = self._to_camel_case(attr) if camel_case else attr\nif data.get(cased_attr) is not None:\nsetattr(model, attr, data[cased_attr])\nelse:\nsetattr(model, attr, None)\ndef _set_attrs_cased(self, model: Any, data: dict[str, Any], *attrs: str) -&gt; None:\n\"\"\"Generate model from JSON payload when input arguments need to be changed to camel case.\"\"\"\nreturn self._set_attrs(model, data, *attrs, camel_case=True)\ndef _deserialize_terrain(self, data: dict[str, Any]) -&gt; Terrain:\n\"\"\"Deserializes JSON payload into `Terrain` model.\"\"\"\nterrain = Terrain()\nterrain.urban = self._deserialize_terrain_details(data.get(\"urban\", {}))\nterrain.outdoor = self._deserialize_terrain_details(data.get(\"outdoor\", {}))\nterrain.indoor = self._deserialize_terrain_details(data.get(\"indoor\", {}))\nreturn terrain\ndef _deserialize_terrain_details(self, data: dict[str, Any]) -&gt; TerrainDetails:\n\"\"\"Deserializes JSON payload into `TerrainDetails` model.\"\"\"\nterrain_details = TerrainDetails(\ndata.get(\"DamageDealt\", \"\"), data.get(\"ShieldBlockRate\", \"\")\n)\nreturn terrain_details\ndef deserialize_character(self, data: dict[str, Any]) -&gt; Character:\n\"\"\"Deserializes JSON payload into `Character` model.\"\"\"\ncharacter = Character()\ncharacter.position = Position.from_str(data.get(\"position\", None))\ncharacter.role = Role.from_str(data.get(\"role\", None))\ncharacter.rarity = Rarity.try_from_str(data.get(\"rarity\", None))\ncharacter.terrain = self._deserialize_terrain(data.get(\"terrain\", {}))\nself._set_attrs_cased(\ncharacter,\ndata,\n\"id\",\n\"name\",\n\"profile\",\n\"base_star\",\n\"armor_type\",\n\"bullet_type\",\n\"weapon_type\",\n\"squad_type\",\n\"school\",\n)\nreturn character\ndef deserialize_character_info(self, data: dict[str, Any]) -&gt; CharacterInfo:\n\"\"\"Deserializes JSON payload into `CharacterInfo` model.\"\"\"\ncharcter_info = CharacterInfo()\nself._set_attrs_cased(\ncharcter_info,\ndata,\n\"age\",\n\"birth_date\",\n\"height\",\n\"artist\",\n\"club\",\n\"school\",\n\"school_year\",\n\"voice_actor\",\n)\nreturn charcter_info\ndef deserialize_stats(self, data: dict[str, Any]) -&gt; Stats:\n\"\"\"Deserializes JSON payload into `Stats` model.\"\"\"\ncharacter_stats = Stats()\nself._set_attrs_cased(\ncharacter_stats,\ndata,\n\"id\",\n\"attack_level1\",\n\"attack_level100\",\n\"defense_level1\",\n\"defense_level100\",\n\"heal_power_level1\",\n\"heal_power_level100\",\n\"def_penetrate_level1\",\n\"def_penetrate_level100\",\n\"ammo_count\",\n\"ammo_cost\",\n\"range\",\n\"move_speed\",\n\"street_mood\",\n\"outdoor_mood\",\n\"indoor_mood\",\n)\nsetattr(character_stats, \"max_hp_level1\", data[\"maxHPLevel1\"])\nsetattr(character_stats, \"max_hp_level100\", data[\"maxHPLevel100\"])\nreturn character_stats\ndef deserialize_skills_details(self, data: dict[str, Any]) -&gt; CommonModel:\n\"\"\"Deserializes JSON payload into `CommonModel` model.\"\"\"\nreturn [\nCommonModel(skill.get(\"id\"), skill.get(\"name\"), skill.get(\"description\", \"\"))\nfor skill in data\n]\ndef deserialize_skills(self, data: dict[str, Any]) -&gt; Skills:\n\"\"\"Deserializes JSON payload into `Skills` model.\"\"\"\ncharacter_skills = Skills()\ncharacter_skills.ex = (\nself.deserialize_skills_details(data.get(\"ex\", [])[0])\nif data.get(\"ex\", None)\nelse None\n)\ncharacter_skills.normal = (\nself.deserialize_skills_details(data.get(\"normal\", [])[0])\nif data.get(\"normal\", None)\nelse None\n)\ncharacter_skills.passive = (\nself.deserialize_skills_details(data.get(\"passive\", [])[0])\nif data.get(\"passive\", None)\nelse None\n)\ncharacter_skills.sub = (\nself.deserialize_skills_details(data.get(\"sub\", [])[0])\nif data.get(\"sub\", None)\nelse None\n)\nreturn character_skills\ndef deserialize_image(self, data: dict[str, Any]) -&gt; Image:\n\"\"\"Deserializes JSON payload into `Image` model.\"\"\"\nreturn Image(\ndata.get(\"icon\", \"\"),\ndata.get(\"portrait\", \"\"),\ndata.get(\"lobby\", \"\"),\n)\ndef deserialize_base_character(self, data: dict[str, Any]) -&gt; BaseCharacter:\n\"\"\"Deserializes JSON payload into `BaseCharacter` model.\"\"\"\ncharacter = BaseCharacter()\ncharacter.position = Position.from_str(data.get(\"position\", None))\ncharacter.role = Role.from_str(data.get(\"role\", None))\ncharacter.rarity = Rarity.try_from_str(data.get(\"rarity\", None))\nself._set_attrs_cased(\ncharacter,\ndata,\n\"name\",\n\"profile\",\n\"base_star\",\n\"armor_type\",\n\"bullet_type\",\n\"weapon_type\",\n\"squad_type\",\n)\nreturn character\ndef deserialize_character_details(self, data: dict[str, Any]) -&gt; CharacterDetails:\n\"\"\"Deserializes JSON payload into `CharacterDetails` model.\"\"\"\ncharcter_details = CharacterDetails()\ncharcter_details.character = self.deserialize_base_character(data.get(\"character\", {}))\ncharcter_details.info = self.deserialize_character_info(data.get(\"info\", {}))\ncharcter_details.stat = self.deserialize_stats(data.get(\"stat\", {}))\ncharcter_details.terrain = self._deserialize_terrain(data.get(\"terrain\", {}))\ncharcter_details.image = self.deserialize_image(data.get(\"image\", {}))\ncharcter_details.skills = self.deserialize_skills(data.get(\"skills\", {}))\nself._set_attrs_cased(charcter_details, data, \"id\", \"is_released\", \"is_playable\")\nreturn charcter_details\ndef deserialize_characters_from_query(self, data: dict[str, Any]) -&gt; Characters:\n\"\"\"Deserializes JSON payload into `Characters` model.\"\"\"\nreturn Characters(data.get(\"id\"), data.get(\"name\"))\ndef deserialize_raid(self, data: dict[str, Any]) -&gt; Raid:\n\"\"\"Deserializes JSON payload into `Raid` model.\"\"\"\nraid = Raid()\nraid.start_at = self._datetime_from_unix_ms(data.get(\"startAt\", None))\nraid.settle_at = self._datetime_from_unix_ms(data.get(\"settleAt\", None))\nraid.end_at = self._datetime_from_unix_ms(data.get(\"endAt\", None))\nself._set_attrs_cased(raid, data, \"season_id\", \"boss_name\")\nreturn raid\ndef deserialize_raids(self, data: dict[str, Any]) -&gt; Raids:\n\"\"\"Deserializes JSON payload into `Raids` model.\"\"\"\nraids = Raids()\nraids.current = [self.deserialize_raid(raid) for raid in data.get(\"current\", [])]\nraids.upcoming = [self.deserialize_raid(raid) for raid in data.get(\"upcoming\", [])]\nraids.ended = [self.deserialize_raid(raid) for raid in data.get(\"ended\", [])]\nreturn raids\n</code></pre>"},{"location":"reference/serializer/#barch.serializer.Serializer.deserialize_base_character","title":"deserialize_base_character","text":"<pre><code>deserialize_base_character(\ndata: dict[str, Any]\n) -&gt; BaseCharacter\n</code></pre> <p>Deserializes JSON payload into <code>BaseCharacter</code> model.</p> Source code in <code>barch/serializer.py</code> <pre><code>def deserialize_base_character(self, data: dict[str, Any]) -&gt; BaseCharacter:\n\"\"\"Deserializes JSON payload into `BaseCharacter` model.\"\"\"\ncharacter = BaseCharacter()\ncharacter.position = Position.from_str(data.get(\"position\", None))\ncharacter.role = Role.from_str(data.get(\"role\", None))\ncharacter.rarity = Rarity.try_from_str(data.get(\"rarity\", None))\nself._set_attrs_cased(\ncharacter,\ndata,\n\"name\",\n\"profile\",\n\"base_star\",\n\"armor_type\",\n\"bullet_type\",\n\"weapon_type\",\n\"squad_type\",\n)\nreturn character\n</code></pre>"},{"location":"reference/serializer/#barch.serializer.Serializer.deserialize_character","title":"deserialize_character","text":"<pre><code>deserialize_character(data: dict[str, Any]) -&gt; Character\n</code></pre> <p>Deserializes JSON payload into <code>Character</code> model.</p> Source code in <code>barch/serializer.py</code> <pre><code>def deserialize_character(self, data: dict[str, Any]) -&gt; Character:\n\"\"\"Deserializes JSON payload into `Character` model.\"\"\"\ncharacter = Character()\ncharacter.position = Position.from_str(data.get(\"position\", None))\ncharacter.role = Role.from_str(data.get(\"role\", None))\ncharacter.rarity = Rarity.try_from_str(data.get(\"rarity\", None))\ncharacter.terrain = self._deserialize_terrain(data.get(\"terrain\", {}))\nself._set_attrs_cased(\ncharacter,\ndata,\n\"id\",\n\"name\",\n\"profile\",\n\"base_star\",\n\"armor_type\",\n\"bullet_type\",\n\"weapon_type\",\n\"squad_type\",\n\"school\",\n)\nreturn character\n</code></pre>"},{"location":"reference/serializer/#barch.serializer.Serializer.deserialize_character_details","title":"deserialize_character_details","text":"<pre><code>deserialize_character_details(\ndata: dict[str, Any]\n) -&gt; CharacterDetails\n</code></pre> <p>Deserializes JSON payload into <code>CharacterDetails</code> model.</p> Source code in <code>barch/serializer.py</code> <pre><code>def deserialize_character_details(self, data: dict[str, Any]) -&gt; CharacterDetails:\n\"\"\"Deserializes JSON payload into `CharacterDetails` model.\"\"\"\ncharcter_details = CharacterDetails()\ncharcter_details.character = self.deserialize_base_character(data.get(\"character\", {}))\ncharcter_details.info = self.deserialize_character_info(data.get(\"info\", {}))\ncharcter_details.stat = self.deserialize_stats(data.get(\"stat\", {}))\ncharcter_details.terrain = self._deserialize_terrain(data.get(\"terrain\", {}))\ncharcter_details.image = self.deserialize_image(data.get(\"image\", {}))\ncharcter_details.skills = self.deserialize_skills(data.get(\"skills\", {}))\nself._set_attrs_cased(charcter_details, data, \"id\", \"is_released\", \"is_playable\")\nreturn charcter_details\n</code></pre>"},{"location":"reference/serializer/#barch.serializer.Serializer.deserialize_character_info","title":"deserialize_character_info","text":"<pre><code>deserialize_character_info(\ndata: dict[str, Any]\n) -&gt; CharacterInfo\n</code></pre> <p>Deserializes JSON payload into <code>CharacterInfo</code> model.</p> Source code in <code>barch/serializer.py</code> <pre><code>def deserialize_character_info(self, data: dict[str, Any]) -&gt; CharacterInfo:\n\"\"\"Deserializes JSON payload into `CharacterInfo` model.\"\"\"\ncharcter_info = CharacterInfo()\nself._set_attrs_cased(\ncharcter_info,\ndata,\n\"age\",\n\"birth_date\",\n\"height\",\n\"artist\",\n\"club\",\n\"school\",\n\"school_year\",\n\"voice_actor\",\n)\nreturn charcter_info\n</code></pre>"},{"location":"reference/serializer/#barch.serializer.Serializer.deserialize_characters_from_query","title":"deserialize_characters_from_query","text":"<pre><code>deserialize_characters_from_query(\ndata: dict[str, Any]\n) -&gt; Characters\n</code></pre> <p>Deserializes JSON payload into <code>Characters</code> model.</p> Source code in <code>barch/serializer.py</code> <pre><code>def deserialize_characters_from_query(self, data: dict[str, Any]) -&gt; Characters:\n\"\"\"Deserializes JSON payload into `Characters` model.\"\"\"\nreturn Characters(data.get(\"id\"), data.get(\"name\"))\n</code></pre>"},{"location":"reference/serializer/#barch.serializer.Serializer.deserialize_image","title":"deserialize_image","text":"<pre><code>deserialize_image(data: dict[str, Any]) -&gt; Image\n</code></pre> <p>Deserializes JSON payload into <code>Image</code> model.</p> Source code in <code>barch/serializer.py</code> <pre><code>def deserialize_image(self, data: dict[str, Any]) -&gt; Image:\n\"\"\"Deserializes JSON payload into `Image` model.\"\"\"\nreturn Image(\ndata.get(\"icon\", \"\"),\ndata.get(\"portrait\", \"\"),\ndata.get(\"lobby\", \"\"),\n)\n</code></pre>"},{"location":"reference/serializer/#barch.serializer.Serializer.deserialize_raid","title":"deserialize_raid","text":"<pre><code>deserialize_raid(data: dict[str, Any]) -&gt; Raid\n</code></pre> <p>Deserializes JSON payload into <code>Raid</code> model.</p> Source code in <code>barch/serializer.py</code> <pre><code>def deserialize_raid(self, data: dict[str, Any]) -&gt; Raid:\n\"\"\"Deserializes JSON payload into `Raid` model.\"\"\"\nraid = Raid()\nraid.start_at = self._datetime_from_unix_ms(data.get(\"startAt\", None))\nraid.settle_at = self._datetime_from_unix_ms(data.get(\"settleAt\", None))\nraid.end_at = self._datetime_from_unix_ms(data.get(\"endAt\", None))\nself._set_attrs_cased(raid, data, \"season_id\", \"boss_name\")\nreturn raid\n</code></pre>"},{"location":"reference/serializer/#barch.serializer.Serializer.deserialize_raids","title":"deserialize_raids","text":"<pre><code>deserialize_raids(data: dict[str, Any]) -&gt; Raids\n</code></pre> <p>Deserializes JSON payload into <code>Raids</code> model.</p> Source code in <code>barch/serializer.py</code> <pre><code>def deserialize_raids(self, data: dict[str, Any]) -&gt; Raids:\n\"\"\"Deserializes JSON payload into `Raids` model.\"\"\"\nraids = Raids()\nraids.current = [self.deserialize_raid(raid) for raid in data.get(\"current\", [])]\nraids.upcoming = [self.deserialize_raid(raid) for raid in data.get(\"upcoming\", [])]\nraids.ended = [self.deserialize_raid(raid) for raid in data.get(\"ended\", [])]\nreturn raids\n</code></pre>"},{"location":"reference/serializer/#barch.serializer.Serializer.deserialize_skills","title":"deserialize_skills","text":"<pre><code>deserialize_skills(data: dict[str, Any]) -&gt; Skills\n</code></pre> <p>Deserializes JSON payload into <code>Skills</code> model.</p> Source code in <code>barch/serializer.py</code> <pre><code>def deserialize_skills(self, data: dict[str, Any]) -&gt; Skills:\n\"\"\"Deserializes JSON payload into `Skills` model.\"\"\"\ncharacter_skills = Skills()\ncharacter_skills.ex = (\nself.deserialize_skills_details(data.get(\"ex\", [])[0])\nif data.get(\"ex\", None)\nelse None\n)\ncharacter_skills.normal = (\nself.deserialize_skills_details(data.get(\"normal\", [])[0])\nif data.get(\"normal\", None)\nelse None\n)\ncharacter_skills.passive = (\nself.deserialize_skills_details(data.get(\"passive\", [])[0])\nif data.get(\"passive\", None)\nelse None\n)\ncharacter_skills.sub = (\nself.deserialize_skills_details(data.get(\"sub\", [])[0])\nif data.get(\"sub\", None)\nelse None\n)\nreturn character_skills\n</code></pre>"},{"location":"reference/serializer/#barch.serializer.Serializer.deserialize_skills_details","title":"deserialize_skills_details","text":"<pre><code>deserialize_skills_details(\ndata: dict[str, Any]\n) -&gt; CommonModel\n</code></pre> <p>Deserializes JSON payload into <code>CommonModel</code> model.</p> Source code in <code>barch/serializer.py</code> <pre><code>def deserialize_skills_details(self, data: dict[str, Any]) -&gt; CommonModel:\n\"\"\"Deserializes JSON payload into `CommonModel` model.\"\"\"\nreturn [\nCommonModel(skill.get(\"id\"), skill.get(\"name\"), skill.get(\"description\", \"\"))\nfor skill in data\n]\n</code></pre>"},{"location":"reference/serializer/#barch.serializer.Serializer.deserialize_stats","title":"deserialize_stats","text":"<pre><code>deserialize_stats(data: dict[str, Any]) -&gt; Stats\n</code></pre> <p>Deserializes JSON payload into <code>Stats</code> model.</p> Source code in <code>barch/serializer.py</code> <pre><code>def deserialize_stats(self, data: dict[str, Any]) -&gt; Stats:\n\"\"\"Deserializes JSON payload into `Stats` model.\"\"\"\ncharacter_stats = Stats()\nself._set_attrs_cased(\ncharacter_stats,\ndata,\n\"id\",\n\"attack_level1\",\n\"attack_level100\",\n\"defense_level1\",\n\"defense_level100\",\n\"heal_power_level1\",\n\"heal_power_level100\",\n\"def_penetrate_level1\",\n\"def_penetrate_level100\",\n\"ammo_count\",\n\"ammo_cost\",\n\"range\",\n\"move_speed\",\n\"street_mood\",\n\"outdoor_mood\",\n\"indoor_mood\",\n)\nsetattr(character_stats, \"max_hp_level1\", data[\"maxHPLevel1\"])\nsetattr(character_stats, \"max_hp_level100\", data[\"maxHPLevel100\"])\nreturn character_stats\n</code></pre>"},{"location":"reference/services/","title":"services","text":"<p>Module for exporting all services.</p>"},{"location":"reference/services/#barch.services.BaseService","title":"BaseService","text":"<p>             Bases: <code>ABC</code></p> <p>The base service from which all the other services inherit.</p> <p>Parameters:</p> Name Type Description Default <code>http_service</code> <code>HttpService</code> <p>The http service to use for requests.</p> required <code>serializer</code> <code>Serializer</code> <p>The serializer used for deserializing API JSON data.</p> required Source code in <code>barch/services/base.py</code> <pre><code>class BaseService(abc.ABC):\n\"\"\"The base service from which all the other services inherit.\n    Args:\n        http_service: The http service to use for requests.\n        serializer: The serializer used for deserializing API JSON data.\n    \"\"\"\n__slots__ = (\"_http\", \"_serializer\")\ndef __init__(\nself, http_service: HttpService, serializer: serializer.Serializer\n) -&gt; None:\nself._http = http_service\nself._serializer = serializer\n</code></pre>"},{"location":"reference/services/#barch.services.CharacterService","title":"CharacterService","text":"<p>             Bases: <code>BaseService</code></p> <p>The service that handles all the methods related to characters.</p> Source code in <code>barch/services/character.py</code> <pre><code>class CharacterService(BaseService):\n\"\"\"The service that handles all the methods related to characters.\"\"\"\n__slots__ = ()\nasync def _get_all_characters(\nself, is_jp: bool = False\n) -&gt; ResultT[list[Character]]:\n\"\"\"Internal method for getting all character details which is used by the\n        EN and JP version service methods.\n        Keyword Args:\n            is_jp: the optional boolean flag, which specifies if the character details need to be fetched\n                in EN or JP version.\n        Returns:\n            [`Result`][barch.Result] containing `list[Character]` on success or error data on error.\n        \"\"\"\nif is_jp:\nroute = endpoints.GET_ALL_CHARACTERS_JP.generate_route()\nelse:\nroute = endpoints.GET_ALL_CHARACTERS.generate_route()\nresult = await self._http.fetch(route)\nif isinstance(result, HttpErrorResponse):\nreturn Error(result)\nreturn Success(\n[self._serializer.deserialize_character(element) for element in result.data]\n)\nasync def get_all_characters(self) -&gt; ResultT[list[Character]]:\n\"\"\"Get all the characters with details EN version.\n        Returns:\n            [`Result`][barch.Result] containing `list[Character]` on success or error data on error.\n        ??? example\n            ```py\n            from barch import Client\n            client = Client()\n            result = await client.character.get_all_characters()\n            if result.is_success:\n                characters = result.value\n            if result.is_error:\n                error = result.error\n            await client.close()\n            ```\n        \"\"\"\nreturn await self._get_all_characters()\nasync def get_all_characters_jp(self) -&gt; ResultT[list[Character]]:\n\"\"\"Get all the characters with details japanese version.\n        Returns:\n            [`Result`][barch.Result] containing `list[Character]` on success or error data on error.\n        ??? example\n            ```py\n            from barch import Client\n            client = Client()\n            result = await client.character.get_all_characters_jp()\n            if result.is_success:\n                characters = result.value\n            if result.is_error:\n                error = result.error\n            await client.close()\n        \"\"\"\nreturn await self._get_all_characters(is_jp=True)\nasync def _get_character(\nself, name: str | None = None, id: int | None = None, is_jp: bool = False\n) -&gt; ResultT[CharacterDetails]:\n\"\"\"Internal method used to get a single character details, which is used by both EN and JP versions.\n        Keyword Args:\n            name: The optional name of the chracter either for EN and JP version.\n            id: The optional id of the character.\n            is_jp: The optional is_jp flag which specifies if the character details need to be fetched in EN or JP version.\n        Returns:\n            [`Result`][barch.Result] containing `CharacterDetails` on success or error data on error.\n        \"\"\"\nparams: dict = {}\nif id:\nparams.update({\"id\": \"true\"})\nif is_jp:\nroute = endpoints.GET_CHARACTER_JP.generate_route(\nname if name else id\n).with_params(params if params else None)\nelse:\nroute = endpoints.GET_CHARACTER.generate_route(\nname if name else id\n).with_params(params if params else None)\nresult = await self._http.fetch(route)\nif isinstance(result, HttpErrorResponse):\nreturn Error(result)\nreturn Success(self._serializer.deserialize_character_details(result.data))\nasync def get_character(\nself, name: str | None = None, id: int | None = None\n) -&gt; ResultT[CharacterDetails]:\n\"\"\"Get a single character either by name or id, EN version.\n        Atleast one parameter, either name or id need to be specified.\n        Keyword Args:\n            name: The optional name of the character.\n            id: The optional id of the character.\n        Returns:\n            [`Result`][barch.Result] containing `CharacterDetails]` on success or error data on error.\n        Raises:\n            ValueError: When no arguments are given\n        ??? example\n            ```py\n            from barch import Client\n            client = Client()\n            result = await client.character.get_character(id=10000)\n            if result.is_success:\n                characters = result.value\n            if result.is_error:\n                error = result.error\n            await client.close()\n            ```\n        \"\"\"\nif name or id:\nreturn await self._get_character(name=name, id=id)\nelse:\nraise ValueError(\"Atleast one parameter must be specified.\")\nasync def get_character_jp(\nself, name: str | None = None, id: int | None = None\n) -&gt; ResultT[CharacterDetails]:\n\"\"\"Get a single character either by name or id, JP version.\n        Atleast one parameter, either name or id need to be specified.\n        Keyword Args:\n            name: The optional name of the character. Note that the character input name needs to be JP.\n            id: The optional id of the character.\n        Returns:\n            [`Result`][barch.Result] containing `CharacterDetails` on success or error data on error.\n        ??? example\n            ```py\n            from barch import Client\n            client = Client()\n            result = await client.character.get_character_jp(id=10000)\n            if result.is_success:\n                characters = result.value\n            if result.is_error:\n                error = result.error\n            await client.close()\n            ```\"\"\"\nreturn await self._get_character(name=name, id=id, is_jp=True)\nasync def get_character_by_query(\nself,\nrole: Role | None = None,\ntype: str | None = None,\nschool: str | None = None,\nclub: str | None = None,\nposition: Position | None = None,\nweapon: str | None = None,\ndamage: str | None = None,\narmor: str | None = None,\n) -&gt; ResultT[Characters]:\n\"\"\"Get a single character details based on different parameters.\n        Atleast one parameter must be specified. Multiple parameters can be specified\n        to get characters based on different filters.\n        Keyword Args:\n            role: The optional `Role` enum parameter, which gets characters by role.\n            type: The optional `type` parameter, which gets characters by the type.\n            school: The optional `school` parameter, which gets characters by their school.\n            club: The optional `club` parameter, which gets characters by their club.\n            position: The optional `Position` enum parameter, which gets characters by their position.\n            weapon: The optional `weapon` parameter, which gets characters by their weapon.\n            damage: The optional `damage` parameter.\n            armor: The optional `armor` parameter.\n        Returns:\n            [`Result`][barch.Result] containing `Characters` on success or error data on error.\n        Raises:\n            ValueError: When no arguments are given.\n        ??? example\n            ```py\n            from barch import Client, Role, Position\n            client = Client()\n            result = await client.character.get_character_by_query(role=Role.Dealer, position=Position.Back)\n            if result.is_success:\n                characters = result.value\n            if result.is_error:\n                error = result.error\n            await client.close()\n        \"\"\"\nif any([role, type, school, club, position, weapon, damage, armor]):\nparams = {\n\"role\": role.value if role else \"\",\n\"type\": type if type else \"\",\n\"school\": school if school else \"\",\n\"club\": club if club else \"\",\n\"position\": position.value if position else \"\",\n\"weapon\": weapon if weapon else \"\",\n\"damage\": damage if damage else \"\",\n\"armor\": armor if armor else \"\",\n}\nroute = endpoints.GET_CHARACTER_QUERY.generate_route().with_params(params)\nresult = await self._http.fetch(route)\nif isinstance(result, HttpErrorResponse):\nreturn Error(result)\nreturn Success(\n[\nself._serializer.deserialize_characters_from_query(char)\nfor char in result.data\n]\n)\nelse:\nraise ValueError(\"Atleast one parameter must be specified.\")\n</code></pre>"},{"location":"reference/services/#barch.services.CharacterService.get_all_characters","title":"get_all_characters  <code>async</code>","text":"<pre><code>get_all_characters() -&gt; ResultT[list[Character]]\n</code></pre> <p>Get all the characters with details EN version.</p> <p>Returns:</p> Type Description <code>ResultT[list[Character]]</code> <p><code>Result</code> containing <code>list[Character]</code> on success or error data on error.</p> Example <pre><code>from barch import Client\nclient = Client()\nresult = await client.character.get_all_characters()\nif result.is_success:\ncharacters = result.value\nif result.is_error:\nerror = result.error\nawait client.close()\n</code></pre> Source code in <code>barch/services/character.py</code> <pre><code>async def get_all_characters(self) -&gt; ResultT[list[Character]]:\n\"\"\"Get all the characters with details EN version.\n    Returns:\n        [`Result`][barch.Result] containing `list[Character]` on success or error data on error.\n    ??? example\n        ```py\n        from barch import Client\n        client = Client()\n        result = await client.character.get_all_characters()\n        if result.is_success:\n            characters = result.value\n        if result.is_error:\n            error = result.error\n        await client.close()\n        ```\n    \"\"\"\nreturn await self._get_all_characters()\n</code></pre>"},{"location":"reference/services/#barch.services.CharacterService.get_all_characters_jp","title":"get_all_characters_jp  <code>async</code>","text":"<pre><code>get_all_characters_jp() -&gt; ResultT[list[Character]]\n</code></pre> <p>Get all the characters with details japanese version.</p> <p>Returns:</p> Type Description <code>ResultT[list[Character]]</code> <p><code>Result</code> containing <code>list[Character]</code> on success or error data on error.</p> Example <p>```py from barch import Client</p> <p>client = Client()</p> <p>result = await client.character.get_all_characters_jp()</p> <p>if result.is_success:     characters = result.value</p> <p>if result.is_error:     error = result.error</p> <p>await client.close()</p> Source code in <code>barch/services/character.py</code> <pre><code>async def get_all_characters_jp(self) -&gt; ResultT[list[Character]]:\n\"\"\"Get all the characters with details japanese version.\n    Returns:\n        [`Result`][barch.Result] containing `list[Character]` on success or error data on error.\n    ??? example\n        ```py\n        from barch import Client\n        client = Client()\n        result = await client.character.get_all_characters_jp()\n        if result.is_success:\n            characters = result.value\n        if result.is_error:\n            error = result.error\n        await client.close()\n    \"\"\"\nreturn await self._get_all_characters(is_jp=True)\n</code></pre>"},{"location":"reference/services/#barch.services.CharacterService.get_character","title":"get_character  <code>async</code>","text":"<pre><code>get_character(\nname: str | None = None, id: int | None = None\n) -&gt; ResultT[CharacterDetails]\n</code></pre> <p>Get a single character either by name or id, EN version. Atleast one parameter, either name or id need to be specified.</p> <p>Other Parameters:</p> Name Type Description <code>name</code> <code>str | None</code> <p>The optional name of the character.</p> <code>id</code> <code>int | None</code> <p>The optional id of the character.</p> <p>Returns:</p> Type Description <code>ResultT[CharacterDetails]</code> <p><code>Result</code> containing <code>CharacterDetails]</code> on success or error data on error.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>When no arguments are given</p> Example <pre><code>from barch import Client\nclient = Client()\nresult = await client.character.get_character(id=10000)\nif result.is_success:\ncharacters = result.value\nif result.is_error:\nerror = result.error\nawait client.close()\n</code></pre> Source code in <code>barch/services/character.py</code> <pre><code>async def get_character(\nself, name: str | None = None, id: int | None = None\n) -&gt; ResultT[CharacterDetails]:\n\"\"\"Get a single character either by name or id, EN version.\n    Atleast one parameter, either name or id need to be specified.\n    Keyword Args:\n        name: The optional name of the character.\n        id: The optional id of the character.\n    Returns:\n        [`Result`][barch.Result] containing `CharacterDetails]` on success or error data on error.\n    Raises:\n        ValueError: When no arguments are given\n    ??? example\n        ```py\n        from barch import Client\n        client = Client()\n        result = await client.character.get_character(id=10000)\n        if result.is_success:\n            characters = result.value\n        if result.is_error:\n            error = result.error\n        await client.close()\n        ```\n    \"\"\"\nif name or id:\nreturn await self._get_character(name=name, id=id)\nelse:\nraise ValueError(\"Atleast one parameter must be specified.\")\n</code></pre>"},{"location":"reference/services/#barch.services.CharacterService.get_character_by_query","title":"get_character_by_query  <code>async</code>","text":"<pre><code>get_character_by_query(\nrole: Role | None = None,\ntype: str | None = None,\nschool: str | None = None,\nclub: str | None = None,\nposition: Position | None = None,\nweapon: str | None = None,\ndamage: str | None = None,\narmor: str | None = None,\n) -&gt; ResultT[Characters]\n</code></pre> <p>Get a single character details based on different parameters. Atleast one parameter must be specified. Multiple parameters can be specified to get characters based on different filters.</p> <p>Other Parameters:</p> Name Type Description <code>role</code> <code>Role | None</code> <p>The optional <code>Role</code> enum parameter, which gets characters by role.</p> <code>type</code> <code>str | None</code> <p>The optional <code>type</code> parameter, which gets characters by the type.</p> <code>school</code> <code>str | None</code> <p>The optional <code>school</code> parameter, which gets characters by their school.</p> <code>club</code> <code>str | None</code> <p>The optional <code>club</code> parameter, which gets characters by their club.</p> <code>position</code> <code>Position | None</code> <p>The optional <code>Position</code> enum parameter, which gets characters by their position.</p> <code>weapon</code> <code>str | None</code> <p>The optional <code>weapon</code> parameter, which gets characters by their weapon.</p> <code>damage</code> <code>str | None</code> <p>The optional <code>damage</code> parameter.</p> <code>armor</code> <code>str | None</code> <p>The optional <code>armor</code> parameter.</p> <p>Returns:</p> Type Description <code>ResultT[Characters]</code> <p><code>Result</code> containing <code>Characters</code> on success or error data on error.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>When no arguments are given.</p> Example <p>```py from barch import Client, Role, Position</p> <p>client = Client()</p> <p>result = await client.character.get_character_by_query(role=Role.Dealer, position=Position.Back)</p> <p>if result.is_success:     characters = result.value</p> <p>if result.is_error:     error = result.error</p> <p>await client.close()</p> Source code in <code>barch/services/character.py</code> <pre><code>async def get_character_by_query(\nself,\nrole: Role | None = None,\ntype: str | None = None,\nschool: str | None = None,\nclub: str | None = None,\nposition: Position | None = None,\nweapon: str | None = None,\ndamage: str | None = None,\narmor: str | None = None,\n) -&gt; ResultT[Characters]:\n\"\"\"Get a single character details based on different parameters.\n    Atleast one parameter must be specified. Multiple parameters can be specified\n    to get characters based on different filters.\n    Keyword Args:\n        role: The optional `Role` enum parameter, which gets characters by role.\n        type: The optional `type` parameter, which gets characters by the type.\n        school: The optional `school` parameter, which gets characters by their school.\n        club: The optional `club` parameter, which gets characters by their club.\n        position: The optional `Position` enum parameter, which gets characters by their position.\n        weapon: The optional `weapon` parameter, which gets characters by their weapon.\n        damage: The optional `damage` parameter.\n        armor: The optional `armor` parameter.\n    Returns:\n        [`Result`][barch.Result] containing `Characters` on success or error data on error.\n    Raises:\n        ValueError: When no arguments are given.\n    ??? example\n        ```py\n        from barch import Client, Role, Position\n        client = Client()\n        result = await client.character.get_character_by_query(role=Role.Dealer, position=Position.Back)\n        if result.is_success:\n            characters = result.value\n        if result.is_error:\n            error = result.error\n        await client.close()\n    \"\"\"\nif any([role, type, school, club, position, weapon, damage, armor]):\nparams = {\n\"role\": role.value if role else \"\",\n\"type\": type if type else \"\",\n\"school\": school if school else \"\",\n\"club\": club if club else \"\",\n\"position\": position.value if position else \"\",\n\"weapon\": weapon if weapon else \"\",\n\"damage\": damage if damage else \"\",\n\"armor\": armor if armor else \"\",\n}\nroute = endpoints.GET_CHARACTER_QUERY.generate_route().with_params(params)\nresult = await self._http.fetch(route)\nif isinstance(result, HttpErrorResponse):\nreturn Error(result)\nreturn Success(\n[\nself._serializer.deserialize_characters_from_query(char)\nfor char in result.data\n]\n)\nelse:\nraise ValueError(\"Atleast one parameter must be specified.\")\n</code></pre>"},{"location":"reference/services/#barch.services.CharacterService.get_character_jp","title":"get_character_jp  <code>async</code>","text":"<pre><code>get_character_jp(\nname: str | None = None, id: int | None = None\n) -&gt; ResultT[CharacterDetails]\n</code></pre> <p>Get a single character either by name or id, JP version. Atleast one parameter, either name or id need to be specified.</p> <p>Other Parameters:</p> Name Type Description <code>name</code> <code>str | None</code> <p>The optional name of the character. Note that the character input name needs to be JP.</p> <code>id</code> <code>int | None</code> <p>The optional id of the character.</p> <p>Returns:</p> Type Description <code>ResultT[CharacterDetails]</code> <p><code>Result</code> containing <code>CharacterDetails</code> on success or error data on error.</p> Example <pre><code>from barch import Client\nclient = Client()\nresult = await client.character.get_character_jp(id=10000)\nif result.is_success:\ncharacters = result.value\nif result.is_error:\nerror = result.error\nawait client.close()\n</code></pre> Source code in <code>barch/services/character.py</code> <pre><code>async def get_character_jp(\nself, name: str | None = None, id: int | None = None\n) -&gt; ResultT[CharacterDetails]:\n\"\"\"Get a single character either by name or id, JP version.\n    Atleast one parameter, either name or id need to be specified.\n    Keyword Args:\n        name: The optional name of the character. Note that the character input name needs to be JP.\n        id: The optional id of the character.\n    Returns:\n        [`Result`][barch.Result] containing `CharacterDetails` on success or error data on error.\n    ??? example\n        ```py\n        from barch import Client\n        client = Client()\n        result = await client.character.get_character_jp(id=10000)\n        if result.is_success:\n            characters = result.value\n        if result.is_error:\n            error = result.error\n        await client.close()\n        ```\"\"\"\nreturn await self._get_character(name=name, id=id, is_jp=True)\n</code></pre>"},{"location":"reference/services/#barch.services.HttpService","title":"HttpService","text":"<p>The HTTP service that is used to make requets to API.</p> Source code in <code>barch/services/http.py</code> <pre><code>class HttpService:\n\"\"\"The HTTP service that is used to make requets to API.\"\"\"\n__slots__ = (\"_session\",)\ndef __init__(self) -&gt; None:\nself._session = aiohttp.ClientSession()\ndef _get_session_method(self, method: str, session: Any) -&gt; Any:\n\"\"\"Get the session with method type.\n        Returns:\n            The session with respective method.\n        \"\"\"\n_method_mapping = {\n\"GET\": session.get,\n\"POST\": session.post,\n\"PUT\": session.put,\n\"PATCH\": session.patch,\n\"DELETE\": session.delete,\n}\nreturn _method_mapping[method]\nasync def _request(\nself,\nsession: Any,\nuri: str,\nparams: dict[str, str | int],\ndata: dict[str, str | int],\n) -&gt; HttpSuccessResponse | HttpErrorResponse:\n\"\"\"Make the actual request to the MAL API based on given params.\n        Returns:\n            The response from the API call.\"\"\"\ntry:\nasync with session(uri, params=params, data=data) as r:\nresponse = await r.json()\nif r.status == 200:\nreturn HttpSuccessResponse(r.status, \"Success.\", response)\nreturn HttpErrorResponse(r.status, response.get(\"error\"))\nexcept Exception as e:\nreturn HttpErrorResponse(500, str(e))\nasync def fetch(\nself, route: GenerateRoute\n) -&gt; HttpSuccessResponse | HttpErrorResponse:\n\"\"\"Makes a request to the given route.\n        Returns:\n            The HTTP response [`HttpSuccessResponse`] or [`HttpErrorResponse`] of the API call.\n        \"\"\"\ntry:\nreturn await self._request(\nself._get_session_method(route.method, self._session),\nroute.uri,\nroute.params,\nroute.data,\n)\nexcept Exception as e:\nreturn HttpErrorResponse(500, str(e))\nasync def close(self) -&gt; None:\n\"\"\"Close the open aiohttp clientsession.\"\"\"\nif self._session and not self._session.closed:\nawait self._session.close()\n</code></pre>"},{"location":"reference/services/#barch.services.HttpService.close","title":"close  <code>async</code>","text":"<pre><code>close() -&gt; None\n</code></pre> <p>Close the open aiohttp clientsession.</p> Source code in <code>barch/services/http.py</code> <pre><code>async def close(self) -&gt; None:\n\"\"\"Close the open aiohttp clientsession.\"\"\"\nif self._session and not self._session.closed:\nawait self._session.close()\n</code></pre>"},{"location":"reference/services/#barch.services.HttpService.fetch","title":"fetch  <code>async</code>","text":"<pre><code>fetch(\nroute: GenerateRoute,\n) -&gt; HttpSuccessResponse | HttpErrorResponse\n</code></pre> <p>Makes a request to the given route.</p> <p>Returns:</p> Type Description <code>HttpSuccessResponse | HttpErrorResponse</code> <p>The HTTP response [<code>HttpSuccessResponse</code>] or [<code>HttpErrorResponse</code>] of the API call.</p> Source code in <code>barch/services/http.py</code> <pre><code>async def fetch(\nself, route: GenerateRoute\n) -&gt; HttpSuccessResponse | HttpErrorResponse:\n\"\"\"Makes a request to the given route.\n    Returns:\n        The HTTP response [`HttpSuccessResponse`] or [`HttpErrorResponse`] of the API call.\n    \"\"\"\ntry:\nreturn await self._request(\nself._get_session_method(route.method, self._session),\nroute.uri,\nroute.params,\nroute.data,\n)\nexcept Exception as e:\nreturn HttpErrorResponse(500, str(e))\n</code></pre>"},{"location":"reference/services/#barch.services.RaidService","title":"RaidService","text":"<p>             Bases: <code>BaseService</code></p> <p>The service that handles all the methods related to raids.</p> Source code in <code>barch/services/raid.py</code> <pre><code>class RaidService(BaseService):\n\"\"\"The service that handles all the methods related to raids.\"\"\"\n__slots__ = ()\nasync def _get_raids(self, is_jp: bool = False) -&gt; ResultT[list[Raids]]:\n\"\"\"Internal method for getting raid details which is used by both EN and JP version.\n        Keyword Args:\n            is_jp: The optional boolean flag, which specifies if the raid details need to \n                be fetched for the EN or JP version.\n        Returns:\n            [`Result`][barch.Result] containing `list[Raids]` on success or error data on error.\n        \"\"\"\nif is_jp:\nroute = endpoints.GET_RAIDS_JP.generate_route()\nelse:\nroute = endpoints.GET_RAIDS.generate_route()\nresult = await self._http.fetch(route)\nif isinstance(result, HttpErrorResponse):\nreturn Error(result)\nreturn Success(self._serializer.deserialize_raids(result.data))\nasync def get_raids(self) -&gt; ResultT[list[Raids]]:\n\"\"\"Gets all the current, upcoming and ended raid details EN version.\n        Returns:\n            [`Result`][barch.Result] containing `list[Raids]` on success or error data on error.\n        \"\"\"\nreturn await self._get_raids()\nasync def get_raids_jp(self) -&gt; ResultT[list[Raids]]:\n\"\"\"Gets all the current, upcoming and ended raid details JP version.\n        Returns:\n            [`Result`][barch.Result] containing `list[Raids]` on success or error data on error.\n        \"\"\"\nreturn await self._get_raids(is_jp=True)\n</code></pre>"},{"location":"reference/services/#barch.services.RaidService.get_raids","title":"get_raids  <code>async</code>","text":"<pre><code>get_raids() -&gt; ResultT[list[Raids]]\n</code></pre> <p>Gets all the current, upcoming and ended raid details EN version.</p> <p>Returns:</p> Type Description <code>ResultT[list[Raids]]</code> <p><code>Result</code> containing <code>list[Raids]</code> on success or error data on error.</p> Source code in <code>barch/services/raid.py</code> <pre><code>async def get_raids(self) -&gt; ResultT[list[Raids]]:\n\"\"\"Gets all the current, upcoming and ended raid details EN version.\n    Returns:\n        [`Result`][barch.Result] containing `list[Raids]` on success or error data on error.\n    \"\"\"\nreturn await self._get_raids()\n</code></pre>"},{"location":"reference/services/#barch.services.RaidService.get_raids_jp","title":"get_raids_jp  <code>async</code>","text":"<pre><code>get_raids_jp() -&gt; ResultT[list[Raids]]\n</code></pre> <p>Gets all the current, upcoming and ended raid details JP version.</p> <p>Returns:</p> Type Description <code>ResultT[list[Raids]]</code> <p><code>Result</code> containing <code>list[Raids]</code> on success or error data on error.</p> Source code in <code>barch/services/raid.py</code> <pre><code>async def get_raids_jp(self) -&gt; ResultT[list[Raids]]:\n\"\"\"Gets all the current, upcoming and ended raid details JP version.\n    Returns:\n        [`Result`][barch.Result] containing `list[Raids]` on success or error data on error.\n    \"\"\"\nreturn await self._get_raids(is_jp=True)\n</code></pre>"}]}